#include <EtherCard.h>

#define CS_PIN 10
#define MOTOR_PIN 3
#define D4_PIN 4
#define D5_PIN 5
#define D6_PIN 6
#define D7_PIN 7
#define D8_PIN 8
#define D9_PIN 9
#define D2_PIN 2

static byte myMac[] = { 0x74, 0x69, 0x69, 0x2D, 0x30, 0x01 };
static byte myIp[] = { 192, 168, 1, 177 };
static byte gwIp[] = { 192, 168, 1, 1 };
static byte dnsIp[] = { 8, 8, 8, 8 };
byte Ethernet::buffer[800]; // Back to 500 since we have 908 free

void setup() {
  Serial.begin(115200);
  while (!Serial);
  
  // Initialize all output pins
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(D4_PIN, OUTPUT);
  pinMode(D5_PIN, OUTPUT);
  pinMode(D6_PIN, OUTPUT);
  pinMode(D7_PIN, OUTPUT);
  pinMode(D8_PIN, OUTPUT);
  pinMode(D9_PIN, OUTPUT);
  pinMode(D2_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);
  digitalWrite(D4_PIN, LOW);
  digitalWrite(D5_PIN, LOW);
  digitalWrite(D6_PIN, LOW);
  digitalWrite(D7_PIN, LOW);
  digitalWrite(D8_PIN, LOW);
  digitalWrite(D9_PIN, LOW);
  digitalWrite(D2_PIN, LOW);
  
  delay(2000);

  if (ether.begin(sizeof Ethernet::buffer, myMac, CS_PIN) == 0) {
    Serial.println(F("Failed to access Ethernet controller"));
    while(1);
  }
  
  if (!ether.staticSetup(myIp, gwIp, dnsIp)) {
    Serial.println(F("Failed to set IP address"));
  }
  
  Serial.print(F("Ready! IP: "));
  ether.printIp(myIp);
  Serial.println();
  Serial.print(F("Free RAM: "));
  Serial.println(freeRam());
}

int freeRam() {
  extern int __heap_start, *__brkval; 
  int v; 
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval); 
}

void loop() {
  word len = ether.packetReceive();
  word pos = ether.packetLoop(len);

  if (pos) {
    char* data = (char *)Ethernet::buffer + pos;
    
    // Only process GET requests to root
    if (strncmp("GET /", data, 5) != 0) {
      // Not a GET request to root - ignore
      return;
    }
    
    Serial.println(data); // Debug output
    
    // Find the start of parameters
    char* params = strchr(data, '?');
    if (params) {
      params++; // Move past the '?'
      
      // Process each command separately
      char* token = strtok(params, " ");
      while (token != NULL) {
        if (strcmp(token, "MOTOR=ON") == 0) {
          digitalWrite(MOTOR_PIN, HIGH);
        } 
        else if (strcmp(token, "MOTOR=OFF") == 0) {
          digitalWrite(MOTOR_PIN, LOW);
        } 
        else if (strcmp(token, "D4=ON") == 0) {
          digitalWrite(D4_PIN, HIGH);
        } 
        else if (strcmp(token, "D4=OFF") == 0) {
          digitalWrite(D4_PIN, LOW);
        } 
        else if (strcmp(token, "D5=ON") == 0) {
          digitalWrite(D5_PIN, HIGH);
        } 
        else if (strcmp(token, "D5=OFF") == 0) {
          digitalWrite(D5_PIN, LOW);
        } 
        else if (strcmp(token, "D6=ON") == 0) {
          digitalWrite(D6_PIN, HIGH);
        } 
        else if (strcmp(token, "D6=OFF") == 0) {
          digitalWrite(D6_PIN, LOW);
        }
         else if (strcmp(token, "D7=ON") == 0) {
          digitalWrite(D7_PIN, HIGH);
        } 
        else if (strcmp(token, "D7=OFF") == 0) {
          digitalWrite(D7_PIN, LOW);
        }
        else if (strcmp(token, "D8=ON") == 0) {
          digitalWrite(D8_PIN, HIGH);
        } 
        else if (strcmp(token, "D8=OFF") == 0) {
          digitalWrite(D8_PIN, LOW);
        } 
        else if (strcmp(token, "D9=ON") == 0) {
          digitalWrite(D9_PIN, HIGH);
        } 
        else if (strcmp(token, "D9=OFF") == 0) {
          digitalWrite(D9_PIN, LOW);
        }
         else if (strcmp(token, "D2=ON") == 0) {
          digitalWrite(D2_PIN, HIGH);
        } 
        else if (strcmp(token, "D2=OFF") == 0) {
          digitalWrite(D2_PIN, LOW);
        }
        
        token = strtok(NULL, " ");
      }
    }
    
    sendResponse();
  }
}

void sendResponse() {
  BufferFiller bfill = ether.tcpOffset();
  
  // Minimal HTML response with no styling
  bfill.emit_p(PSTR(
    "HTTP/1.1 200 OK\r\n"
    "Content-Type: text/html\r\n"
    "Connection: close\r\n"
    "\r\n"
    "<html><body>"
    "<h1>Pin Control</h1>"
    "<p>Motor (D3): $S "
    "<a href='/?MOTOR=ON'>ON</a> "
    "<a href='/?MOTOR=OFF'>OFF</a></p>"
    "<p>D4: $S "
    "<a href='/?D4=ON'>ON</a> "
    "<a href='/?D4=OFF'>OFF</a></p>"
    "<p>D5: $S "
    "<a href='/?D5=ON'>ON</a> "
    "<a href='/?D5=OFF'>OFF</a></p>"
    "<p>D6: $S "
    "<a href='/?D6=ON'>ON</a> "
    "<a href='/?D6=OFF'>OFF</a></p>"
    "<p>D7: $S "
    "<a href='/?D7=ON'>ON</a> "
    "<a href='/?D7=OFF'>OFF</a></p>"
    "<p>D8: $S "
    "<a href='/?D8=ON'>ON</a> "
    "<a href='/?D8=OFF'>OFF</a></p>"
    "<p>D9: $S "
    "<a href='/?D9=ON'>ON</a> "
    "<a href='/?D9=OFF'>OFF</a></p>"
    "<p>D2: $S "
    "<a href='/?D2=ON'>ON</a> "
    "<a href='/?D2=OFF'>OFF</a></p>"
    "</body></html>"
  ), 
  digitalRead(MOTOR_PIN) ? "ON" : "OFF",
  digitalRead(D4_PIN) ? "ON" : "OFF",
  digitalRead(D5_PIN) ? "ON" : "OFF",
  digitalRead(D6_PIN) ? "ON" : "OFF",
  digitalRead(D7_PIN) ? "ON" : "OFF",
  digitalRead(D8_PIN) ? "ON" : "OFF",
  digitalRead(D9_PIN) ? "ON" : "OFF",
  digitalRead(D2_PIN) ? "ON" : "OFF");
  
  ether.httpServerReply(bfill.position());
}
